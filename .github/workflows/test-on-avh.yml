name: test-on-avh

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    uses: ./.github/workflows/build-app.yml
    secrets: inherit
  test-on-avh:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Pull codebase
        uses: actions/checkout@v3
      - name: Download application image
        uses: actions/download-artifact@master
        with:
          name: OTA_MQTT_Update_Demo.Debug_B-U585I-IOT02A_signed.bin
          path: ${{ github.workspace }}/
      - name: Assemble AVH image
        run: |
          cp avh/target/b_u585i_iot02a/default-firmware/load.txt .
          cp avh/target/b_u585i_iot02a/default-firmware/bl2.bin .
          cp avh/target/b_u585i_iot02a/default-firmware/tfm_s_signed.bin .

          zip firmware.zip load.txt bl2.bin tfm_s_signed.bin OTA_MQTT_Update_Demo.Debug_B-U585I-IOT02A_signed.bin
      - name: Run and test on AVH
        run: |
          pip3 install avh-api avh-api-async websockets python-dateutil aiohttp six urllib3 boto3

          export MAJOR_VERSION="$(awk '/define APP_VERSION_MAJOR/ {print $3}' app/AWS/config_files/ota_demo_config.h)"
          export MINOR_VERSION="$(awk '/define APP_VERSION_MINOR/ {print $3}' app/AWS/config_files/ota_demo_config.h)"
          export BUILD_VERSION="$(awk '/define APP_VERSION_BUILD/ {print $3}' app/AWS/config_files/ota_demo_config.h)"

          python3 avh/scripts/avh.py "${{ secrets.AVH_ACCESS_TOKEN }}" "${{ secrets.AVH_MQTT_ENDPOINT }}" "${{ secrets.OTA_POLICY }}" "${{ secrets.AVH_OTA_KEY}}" "$MAJOR_VERSION.$MINOR_VERSION.$BUILD_VERSION" firmware.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "eu-west-1"